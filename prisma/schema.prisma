// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "sqlite"
  url      = "file:./slack-stock.db"
}

generator client {
  provider = "prisma-client-js"
}

// https://api.slack.com/types/user
model User {
  user_id             String  @id
  team_id             String // ワークスペースの ID
  real_name           String // The real name that the user specified in their workspace profile.
  is_admin            Boolean // Indicates whether the user is an Admin of the current workspace.
  is_owner            Boolean // Indicates whether the user is an Owner of the current workspace.
  is_primary_owner    Boolean // Indicates whether the user is the Primary Owner of the current workspace.
  is_restricted       Boolean // Indicates whether or not the user is a guest user. Use in combination with the is_ultra_restricted field to check if the user is a single-channel guest user.
  is_ultra_restricted Boolean // Indicates whether or not the user is a single-channel guest.
  is_app_user         Boolean // Indicates whether the user is an authorized user of the calling app.
  is_bot              Boolean // Indicates whether the user is actually a bot user. Bleep bloop. Note that Slackbot is special so is_bot will be false for it.
  deleted             Boolean // This user has been deactivated when the value of this field is true. Otherwise the value is false or the field may not appear at all.

  Messages Message[]
  @@map("users")
}

// https://api.slack.com/types/conversation
model Channel {
  channel_id            String  @id
  name                  String
  is_channel            Boolean
  is_group              Boolean
  is_im                 Boolean
  is_mpim               Boolean
  is_private            Boolean
  is_archived           Boolean
  is_general            Boolean
  is_shared             Boolean
  is_org_shared         Boolean
  is_pending_ext_shared Boolean
  is_ext_shared         Boolean

  Messages Message[]
  @@map("channels")
}

// https://api.slack.com/types/conversation
model Message {
  message_id Int    @id @default(autoincrement())
  channel_id String
  user_id    String
  ts         String
  type       String
  text       String

  channel Channel @relation(fields: [channel_id], references: [channel_id])
  user    User?   @relation(fields: [user_id], references: [user_id])
  @@unique([channel_id, user_id, ts, type], name: "unique_message")
  @@map("messages")
}
